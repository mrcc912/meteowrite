var mongoose  = require('mongoose');
var alchemy = require('alchamy');
var sha1 = require("sha1");

var ObjectId = mongoose.Types.ObjectId;

mongoose.connection.on('open', function (ref) {
    console.log('Connected to mongo server.');
});

mongoose.connection.on('error', function (err) {
    console.log('Could not connect to mongo server!');
    console.log(err);
});

mongoose.connect("mongodb://ec2-54-235-227-153.compute-1.amazonaws.com/raw");
//mongoose.connect("mongodb://ec2-50-19-21-233.compute-1.amazonaws.com/raw");
var db = mongoose.connection;
var Schema = mongoose.Schema;

/* Schema and Object Declarations */

var APIUserSchema = mongoose.Schema({
    api_key: String,
    name: String,
    use_count: Schema.Types.Mixed
});


var ArticleSchema = mongoose.Schema({
    id: Number,
    headline: String,
    biline: String,
    creditline: String,
    source: String,
    section: String,
    URL: String,
    body: String,
    keywords: Schema.Types.Mixed,
    keywordsCalais: Schema.Types.Mixed,
    keywordsCore: Schema.Types.Mixed,
    reader: [Number],
    readers: [String]
});

var UserSchema = mongoose.Schema({
    username: String,
    fullname: String,
    hometown: String,
    current_location: String,
    gender: String,
    languages: [String],
    work: [String],
    articlesRead: [Number],
    tweetsRead: [Number],
    facebookLikes: [String],
    keywords: Schema.Types.Mixed,
    interests: Schema.Types.Mixed,
});

var User = mongoose.model("User", UserSchema);
var Article = mongoose.model("Article", ArticleSchema);
var APIUser = mongoose.model("APIUser", APIUserSchema);


/* APIUSER FUNCTIONS */
exports.addAPIUser = function(name)
{
    APIUser.findOne({name: name}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    //console.log('already exists');
	    //console.log(api);
	}
	else{
	    var arr = new Array();
	    var hash = sha1(name);
	    var api = new APIUser({
		name: name,
		api_key: hash,
		use_count: arr
	    });
	    api.save(function(err, art){
		if(err) throw err;
		if(art)
		{
		    //correctly saved =D
		    //console.log(art);
		}
	    });
	    
	}
    });
}

exports.removeAPIUser = function(key)
{
    APIUser.findOne({api_key: key}, function(err, api){
	if(err) throw err;
	if(api)
	    api.remove();
    });
}

exports.reportAPIuse = reportAPIuse;

function reportAPIuse(key, func_name)
{
    APIUser.findOne({api_key: key}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    var found = false;
	    for(var i=0; i<api.use_count.length; i++)
	    {
		if(api.use_count[i].func == func_name)
		{
		    //update use_count
		    api.use_count[i].count = api.use_count[i].count + 1;
		    found = true;
		}
	    }
	    if(!found)
	    {
		var obj = new Object();
		obj.func = func_name;
		obj.count = 1;
		api.use_count.push(obj);
	    }
	    console.log(api.use_count);
	    api.markModified('use_count');
	    api.save(function(err, res){
		if(err) throw err;
		if(res)
		{
		    console.log("saved as:");
		    console.log(res);
		}
	    });

	}
    });
}

exports.getAPIUseForKey = function(key, func)
{
    APIUser.findOne({api_key: key}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    func(api.use_count);
	}
    });
}


function saveAPI(key, new_use_count)
{
    console.log(new_use_count);
    APIUser.findOne({api_key: key}, function(err, old_api){
	if(err) throw err;
	if(old_api)
	{
	    var APIObject = new APIUser({
		api_key: key,
		name: old_api.name,
		use_count: new_use_count
	    });
	    console.log(APIObject);
	    /*
	    old_api.remove();
	    APIObject.save(function(err, res){
		if(err) throw err;
		if(res)
		{
		    console.log(res);
		    //huzzah saved;
		}
	    });
	    */
	}
    });
}

exports.saveAPIUser = saveAPI;


/* END OF APIUSER FUNCTIONS */
exports.addUser = function(name, fname, home, curr, gen, lang, work)
{
    User.findOne( {username: name}, function(err, user){
	if(user)
	{

	}
	else
	{
	    //create user
	    var object = new Object();
	    object["meteowrite-secret-num"] = 1.0;
	    var newUser = new User({
		username: name,
		fullname: fname,
		hometown: home,
		current_location: curr,
		gender: gen,
		languages: lang,
		work: work,
                articlesRead: new Array(),
		keywords: object
	    });
	    newUser.save(function(err,doc){
		if(err) throw err;
		console.log(doc);
	    });
	}
    });
};

exports.getUsers = function(func) {
  User.find(function(err,users) {
    if(err) throw err;
      if(users)
	  func(users);
  });
};

exports.getUser = function(userid, func)
{
    User.findOne( {username: userid}, function(err, user){
	if(err) throw err;
	func(user);
    });
};

exports.getArticles = function(func) {
  Article.find(function(err,articles) {
    if(err) throw err;
      if(articles)
	  func(articles);
  });
};

exports.getArticle = function(articleid, func) {
  console.log(articleid);
  Article.findOne({id: articleid}, function(err, article){
    if(err) throw err;
      if(article)
	  func(article); 	
  });
};

exports.addKeywords = function(userID, articleID, keys)
{
    User.findOne( {username: userID}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    for(var i=0; i<keys.length; i++)
	    {
		var key = keys[i].text;
		if(keys[i].text.indexOf('.') != -1)
		    continue;
		if(user.keywords[keys[i].text])
		{
		    user.keywords[keys[i].text] += keys[i].relevance;
		}
		else
		{
		    user.keywords[keys[i].text] = keys[i].relevance;
		}
	    }
	    console.log(user.keywords);
            user.articlesRead.push(articleID);          
            saveUser(user);
	}
    });
};

exports.addTweet = function(userID, tweetID, keys)
{
    User.findOne( {username: userID}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    for(var i=0; i<keys.length; i++)
	    {
		var key = keys[i].text;
		if(keys[i].text.indexOf('.') != -1)
		    continue;
		if(user.keywords[keys[i].text])
		{
		    user.keywords[keys[i].text] += keys[i].relevance;
		}
		else
		{
		    user.keywords[keys[i].text] = keys[i].relevance;
		}
	    }
	    console.log(user.keywords);
	    if(!user.tweersRead) user.tweetsRead = new Array();
            user.tweetsRead.push(articleID);
            saveUser(user);
	}
    });
};

exports.userReadArticle = function(userID, articleID, dispFunc)
{
    User.findOne({username: userID}, function(err, user){
	if(err) throw err;
	if(user)
	{
            var intArtId = parseInt(articleID);            
            var bool = 0;
            console.log(user.articlesRead);
            console.log(user.username);
            for(var i = 0; i < user.articlesRead.length; i = i + 1) {
		if(user.articlesRead[i] == articleID) {
                    bool = 1;
		}
            }
            if(bool == 0) {
		Article.findOne({id: intArtId}, function(err, article){
		    for(var i = 0; i<article.keywords.length; i++) 
		    {
			var textMap = article.keywords[i];
			var word = textMap["text"];
			if(word.indexOf(".") != -1) 
			    continue;
			var relev = textMap["relevance"];
			if(word in user.keywords) {
			    user.keywords[word] += relev;
			}
			else {
			    user.keywords[word] = relev;
			}
			// if the article has not already been read by that user, mark it read
			if(article.readers.indexOf(userID) < 0)
			    article.readers.push(userID);
			article.save(function(err, doc){
			    if(err) throw err;
			    if(doc)
			    {
				//huzzah! article saved correctly
			    }
			});
		    }
                for(var i = 0; i<article.keywordsCalais.length; i++)
                    {
			var textMap = article.keywordsCalais[i];
			var word = textMap["text"];
			if(word.indexOf(".") != -1)
			    continue;
			var relev = textMap["relevance"];
			if(word in user.keywords) {
			    user.keywords[word] += relev;
			}
			else {
			    user.keywords[word] = relev;
			}
                    }
                    for(var i = 0; i<article.keywordsCore.length; i++)
                    {
			var textMap = article.keywordsCore[i];
			var word = textMap["text"];
			if(word.indexOf(".") != -1)
			    continue;
			var relev = textMap["relevance"];
			if(word in user.keywords) {
			    user.keywords[word] += relev;
			}
			else {
			    user.keywords[word] = relev;
			}
                    }
                    user.articlesRead.push(articleID);
                    saveUser(user);
                    dispFunc(user);
		});
            }
            else {
		console.log("already read");  
		dispFunc(user);
            }
	}
    });
};

exports.articleOverlap = function(func) {
    var articles = Article.find(function(err,articles) {
    if(err) throw err;
    var smoke = new Object();
    for(var i = 0; i < articles.length; i++) {
      var articleId = articles[i].id;
      for(var j = 0; j < articles[i].keywords.length; j++) {
        var curMap = articles[i].keywords[j];
        var curText = curMap["text"];
        if(curText in smoke) {
          smoke[curText].push(articleId);
        }
        else {
          smoke[curText] = new Array();
          smoke[curText].push(articleId);
        }
      }
    }
    func(smoke);
  });
};

exports.addArticle = function(ID, head, bi, credit, src, sec, url, bod, func)
{
    Article.findOne( { id : ID}, function(err, article){
	if(article)
	{
	}
	else
	{
	    // read through article

	    // create article
	    var newArticle = new Article({
		id : ID,
		headline: head,
		biline: bi,
		creditline: credit,
		source: src,
		section: sec,
		URL: url,
		body: bod,
	    });
	    newArticle.save(function(err, doc){
		if(err) console.log(err);
		console.log(doc);
		//populate with keywords
		
		func(doc);
	    });
	    console.log(newArticle);
	    
	}
    });
};

exports.populateKeywords = function(ID, keywords)
{
    Article.findOne( {id: ID} , function(err, article){
	if(err) throw err;
	if(article)
	{
	    article.keywords = keywords;
	    article.save(function(err, doc){
		if(err) throw err;
		if(doc)
		{
		    //huzzah
		}
	    });
	}
    });
};

function saveUser(user) {
  var newusername= user.username;
  var newfullname= user.fullname;
  var newhometown= user.hometown;
  var newcurrent_location= user.current_location;
  var newgender= user.gender;
  var newlanguages= user.languages;
  var newwork= user.work;
  var newarticles = user.articlesRead;
  var newkeywords= user.keywords;
  var newUser = new User({
    username: newusername,
    fullname: newfullname,
    hometown: newhometown,
    current_location: newcurrent_location,
    gender: newgender,
    languages: newlanguages,
    work: newwork,
    articlesRead: newarticles,
    keywords: newkeywords
 });

 user.remove();
 newUser.save(function(err, doc){
   if(err) throw err;
 });

}

exports.getUserFacebookLikes = function(username, token, func)
{
    var fql = require('fql');
    var https = require("https");

    var recs = [];
    fql({token: token}).query('SELECT uid FROM user WHERE username = "' + username+'"', function(err, data) {
	if (err) {
            throw err;
	}
	var id = data[0].uid;
	console.log(id);
	var mrcc = 505371215;
	

	var buffer = '';
	
	var path = "https://graph.facebook.com/" + id +"?fields=id,name,interests,likes&access_token=" + token; 
	https.get(path,
		  function(result){
		      
		      result.on('data', function(chunk){
			  buffer += chunk;
		      });
		      
		      result.on('end', function(){
			  console.log(buffer);
			  var obj = JSON.parse(buffer);
			  var likes = obj.likes.data;
			  var likeArr = [];
			  for(num in likes)
			  {
			      likeArr.push(likes[num].name);
			  }
			  User.findOne({}, function(err, user){
			      if(err) throw err;
			      if(user)
			      {
				  for(num in likeArr)
				  {
				      user.facebookLike.push(likeArr[num]);
				  }
				  
			      }
			      saveUser(user);
			      func(likeArr);
			  });
		      });
		      
		  });
    });
    
}

exports.getArticlesRelatedToFacebook = function(username, token,  func)
{
    //get user likes from facebook
    var fql = require('fql');
    var https = require("https");

    
    var recs = [];
    fql({token: token}).query('SELECT uid FROM user WHERE username = "' + username+'"', function(err, data) {
	if (err) {
            throw err;
	}
	var id = data[0].uid;
	console.log(id);
	var mrcc = 505371215;
	

	var buffer = '';
	
	var path = "https://graph.facebook.com/" + id +"?fields=id,name,interests,likes&access_token=" + token; 
	https.get(path,
		  function(result){
		      console.log("huzzah");
		      
		      result.on('data', function(chunk){
			  buffer += chunk;
		      });
		      
		      result.on('end', function(){
			  console.log(buffer);
			  var obj = JSON.parse(buffer);
			  var likes = obj.likes.data;
			  var likeArr = [];
			  for(num in likes)
			  {
			      likeArr.push(likes[num].name);
			  }
			  Article.find({}).exec(function(err, articles){
			      if(err) throw err;
			      if(articles)
			      {
				  for(num in articles)
				  {
				      var words = articles[num].keywords;
				      for(num in words)
				      {
					  if( likeArr.indexOf(words[num].text) >= 0)
					  {
					      var newRec = {};
					      newRec.url = articles[num].URL;
					      newRec.keyword = words[num].text;
					      newRec.relevance = words[num].relevance;
					      
					      recs.push(newRec);   
					  }
				      }
				  }
			      }
			      func(recs);
			  });
			  
		      });
		      
		  });
    });
};

exports.addWordsToUserBlacklist = function(username, goodWords, func) {
  User.findOne({username: username}, function(err, user) {
    if(err) throw err;
    if(user) {
      var wordsToDelete = new Array();
      for(var key1 in user.keywords) {
        if(goodWords.indexOf(key1) == -1) {
          wordsToDelete.push(key1);
        }
      }
      for(var i = 0; i < wordsToDelete.length; i++) {
        delete user.keywords[wordsToDelete[i]];
      }
      saveUser(user);
      func(user); 
    } 
  });
};


exports.relatedArticlesForUserObj = function(user, numRec, func)
{
            var articleScores = new Object();
            var articleObject = new Object();
            Article.find(function(err,articles) {
              if(err) throw err;
              console.log(articles.length);
              for(var i = 0; i < articles.length; i++) {
                var art = articles[i];
                articleObject[art.headline] = new Object();
                if(user.articlesRead.indexOf(art.id) == -1) {
                  articleScores[art.headline] = 0;

                  for(var j = 0; j < art.keywords.length; j++) {
                    var keyMap = art.keywords[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {
                      console.log(word);
                      userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }

                  for(var j = 0; j < art.keywordsCalais.length; j++) {
                    var keyMap = art.keywordsCalais[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {
                      console.log(word);
                      userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }

		  for(var j = 0; j < art.keywordsCore.length; j++) {
                    var keyMap = art.keywordsCore[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {
                      console.log(word);
                      userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
		  

                }
              }

              var artArr = new Array();
              for (var key in articleScores) {
                artArr.push([key, articleScores[key], articleObject[key]]);
              }

              for(var i = 0; i < artArr.length; i++) {
                for(var j = i; j < artArr.length; j++) {
                  if(artArr[i][1] < artArr[j][1]) {
                    var tmp = artArr[j];
                    artArr[j] = artArr[i];
                    artArr[i] = tmp;
                  }
                }
              }
              var retArr = new Object();
              var bla = numRec;
              if(bla > artArr.length) {
                bla = artArr.length;
              }
              for(var i = 0; i < bla; i++) {
                retArr[artArr[i][0]] = artArr[i][2];
              }

              func(retArr);
          });
};



exports.relatedArticlesForUser = function(username, numRec, func)
{
    User.findOne({username: username}, function(err, user){
	if(err) throw err;
	if(user)
	{
            var articleScores = new Object();
            var articleObject = new Object(); 
	    Article.find(function(err,articles) {
              if(err) throw err;
              console.log(articles.length);
              for(var i = 0; i < articles.length; i++) {
                var art = articles[i];
                articleObject[art.headline] = new Object();
                if(user.articlesRead.indexOf(art.id) == -1) {
                  articleScores[art.headline] = 0;
               
		  for(var j = 0; j < art.keywordsCalais.length; j++) {
                    var keyMap = art.keywordsCalais[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {
                      console.log(word);
                      userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
 
                  for(var j = 0; j < art.keywordsCore.length; j++) {
                    var keyMap = art.keywordsCore[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {
                      console.log(word);
                      userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
 
                  for(var j = 0; j < art.keywords.length; j++) {
                    var keyMap = art.keywords[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {
                      console.log(word);
                      userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
                }
              }
            
              var artArr = new Array();
              for (var key in articleScores) {
                artArr.push([key, articleScores[key], articleObject[key]]);
              }

              for(var i = 0; i < artArr.length; i++) {
                for(var j = i; j < artArr.length; j++) {
                  if(artArr[i][1] < artArr[j][1]) {
                    var tmp = artArr[j];
                    artArr[j] = artArr[i];
   		    artArr[i] = tmp;
                  }
                }
              } 
              var retArr = new Object();
              var bla = numRec;
              if(bla > artArr.length) {
                bla = artArr.length;
              }
              for(var i = 0; i < bla; i++) {
                retArr[artArr[i][0]] = artArr[i][2];
              }

              func(retArr);
          });
        }
    });
};

function logAPICall(api_key, func_name)
{
    console.log("here");
    APIUser.findOne({api_key : api_key}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    if(api.use_count[func_name])
		api.use_count[func_name] += 1;
	    else
		api.use_count[func_name] = 1;
	    console.log(api);
	    api.save(function(err, saved){
	    if(err) throw err;
	    if(saved)
	    {
		//huzzah it saved correctly!!
		console.log(saved);
	    }
	});

	}
    });
};

/* PUBLIC API METHODS */

exports.getTopKeywordsForArticle = function(articleID, num, api_key, func)
{
    logAPICall(api_key, "getTopKeywordsForArticle");
    
    console.log(articleID);
    var oid = ObjectId(articleID);
    Article.findOne({_id: oid}, function(err, article){
	if(err)
	{
	    throw err;
	}
	if(article)
	{
	    var sorted = article.keywords.slice(0).sort(function(a, b){ 
		return b.relevance - a.relevance });
	    console.log(sorted);
	    var result = [];
	    
	    //if num is greater than 0, return num entries, else return all
	    if(num >0)
	    {
		for(var i=0; i<num; i++)
		    result[i] = {text: sorted[i].text, rel: sorted[i].relevance};
		func(result);
	    }
	    else
		func(sorted);
	}
    });
}

exports.getArticleReaderInterests = function(articleID, api_key, func)
{
    logAPICall(api_key, "getArticleReaderInterests");    
    Article.findOne({_id : ObjectId(articleID)}, function(err, article){
	if(err)
	    throw err;
	if(article)
	{
	    var interests = [];
	    for(var i=0; i<article.readers.length; i++)
	    {
		User.findOne({id: article.readers[i]}, function(err, reader){
		    if(err) throw err;
		    if(reader)
		    {
			for(var j=0; j<reader.keywords.length; j++)
			{
			    if(interests[reader.keywords[j].text] != null)
				interests[reader.keywords[j].text] += reader.keywords[j].relevance;
			    else
				interests[reader.keywords[j].text] = reader.keywords[j].relevance;
			}
			interests.sort();
			func(interests);
		    }
			
		});
	    }
	}
    });
}

exports.getAuthorKeywords = function(author, api_key, func)
{
    logAPICall(api_key, "getAuthorKeywords");    
    var reg = new RegExp(author);
    Article.find({biline: reg}, function(err, articles){
	if(err) throw err;
	if(articles)
	{
	    var keywords = new Array();
	    for(index in articles)
	    {
		for(word in articles[index].keywords)
		{
		    if(keywords.indexOf(arnticles[index].keywords[word].text) < 0)
			keywords[articles[index].keywords[word].text] = articles[index].keywords[word].relevance;
		    else
			keywords[articles[index].keywords[word].text] += articles[index].keywords[word].relevance;
		}
	    }
	    var result = [];
	    var sorted = keywords.sort(function(a, b){return b - a});
	    for(word in keywords)
	    {
		var obj = new Object();
		obj.word = word;
		obj.relevance = keywords[word];
		result.push(obj);
	    }
	    func(JSON.stringify(result));
	}
    });
}

exports.getArticleFacebook = function(articleID, api_key, func)
{
    logAPICall(api_key, "getArticleFacebook");
    Article.findOne({_id : ObjectId(articleID)}, function(err, article){
	var allLikes = [];
	for(index in article.readers)
	{
	    var user = article.readers[index]
	    User.findOne({username: user}, function(err, user){
		if(err) throw err;
		if(user)
		{
		    for(i in user.facebookLikes)
		    {
			allLikes.push(user.facebookLikes[i]);
		    }
		}
	    });
	}
	func(allLikes);
    });
}

