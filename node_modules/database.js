var mongoose  = require('mongoose');
var alchemy = require('alchamy');

mongoose.connection.on('open', function (ref) {
    console.log('Connected to mongo server.');
});

mongoose.connection.on('error', function (err) {
    console.log('Could not connect to mongo server!');
    console.log(err);
});

//mongoose.connect("mongodb://localhost/raw"); 
mongoose.connect("mongodb://ec2-54-235-227-153.compute-1.amazonaws.com/raw");
//mongoose.connect("mongodb://ec2-50-19-21-233.compute-1.amazonaws.com/raw");
var db = mongoose.connection;
var Schema = mongoose.Schema;

var ArticleSchema = mongoose.Schema({
    id: Number,
    headline: String,
    biline: String,
    creditline: String,
    source: String,
    section: String,
    URL: String,
    body: String,
    keywords: Schema.Types.Mixed
});

var UserSchema = mongoose.Schema({
    username: String,
    fullname: String,
    hometown: String,
    current_location: String,
    gender: String,
    languages: [String],
    work: [String],
    blacklist:[String],
    articlesRead: [Number],
    keywords: Schema.Types.Mixed,
    interests: Schema.Types.Mixed

});

var User = mongoose.model("User", UserSchema);
var Article = mongoose.model("Article", ArticleSchema);

exports.addUser = function(name, fname, home, curr, gen, lang, work)
{
    User.findOne( {username: name}, function(err, user){
	if(user)
	{

	}
	else
	{
	    //create user
	    var object = new Object();
	    object["meteowrite-secret-num"] = 1.0;
	    var newUser = new User({
		username: name,
		fullname: fname,
		hometown: home,
		current_location: curr,
		gender: gen,
		languages: lang,
		work: work,
                blacklist: new Array(),
                articlesRead: new Array(),
		keywords: object
	    });
	    newUser.save(function(err,doc){
		if(err) throw err;
		console.log(doc);
	    });
	}
    });
};


exports.getUsers = function(func) {
  User.find(function(err,users) {
    if(err) throw err;
    func(users);
  });

};

exports.getUser = function(userid, func)
{
    User.findOne( {username: userid}, function(err, user){
	if(err) throw err;
	func(user);
    });
};

exports.getArticle = function(articleid, func) {
  console.log(articleid);
  
  Article.findOne({id: articleid}, function(err, article){
    if(err) throw err;
    func(article); 	
  });
};

exports.addKeywords = function(userID, articleID, keys)
{
    //console.log(keys.keywords);
    User.findOne( {username: userID}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    for(var i=0; i<keys.length; i++)
	    {
		var key = keys[i].text;
		if(keys[i].text.indexOf('.') != -1)
		    continue;
                if(user.blacklist.indexOf(keys[i].text) != -1)
                    continue;
		if(user.keywords[keys[i].text])
		{
		    user.keywords[keys[i].text] += keys[i].relevance;
		}
		else
		{
		    user.keywords[keys[i].text] = keys[i].relevance;
		}
	    }
            
	    console.log(user.keywords);
            user.articlesRead.push(articleID);
            
            saveUser(user);
	    
	}
    });
};

exports.userReadArticle = function(userID, articleID, dispFunc)
{
    User.findOne({username: userID}, function(err, user){
	if(err) throw err;
	if(user)
	{
            var intArtId = parseInt(articleID);
            
            var bool = 0;
            console.log(user.articlesRead);
            console.log(user.username);
            for(var i = 0; i < user.articlesRead.length; i = i + 1) {
              if(user.articlesRead[i] == articleID) {
                bool = 1;
              }
            }
            if(bool == 0) {
	    Article.findOne({id: intArtId}, function(err, article){
                console.log("IM IN");
		for(var i = 0; i<article.keywords.length; i++) 
		{
                    var textMap = article.keywords[i];
                    var word = textMap["text"];
		    if(word.indexOf(".") != -1) 
                      continue;
                    if(user.blacklist.indexOf(word) != -1)
                      continue;
                    var relev = textMap["relevance"];
                    if(word in user.keywords) {
		      user.keywords[word] += relev;
                    }
                    else {
                      user.keywords[word] = relev;
                    }
		}
                user.articlesRead.push(articleID);
                saveUser(user);
	        console.log("hey killa");
                dispFunc(newUser);
	    });
            }
            else {
              console.log("already read");  
            }
	}
    });
};

exports.addArticle = function(ID, head, bi, credit, src, sec, url, bod, func)
{
    Article.findOne( { id : ID}, function(err, article){
	if(article)
	{
	    
	}
	else
	{
	    // read through article

	    // create article
	    var newArticle = new Article({
		id : ID,
		headline: head,
		biline: bi,
		creditline: credit,
		source: src,
		section: sec,
		URL: url,
		body: bod,
	    });
	    newArticle.save(function(err, doc){
		if(err) console.log(err);
		console.log(doc);
		//populate with keywords
		
		func(doc);
	    });
	    console.log(newArticle);
	    
	}
    });
};

exports.populateKeywords = function(ID, keywords)
{
    Article.findOne( {id: ID} , function(err, article){
	if(err) throw err;
	if(article)
	{
	    article.keywords = keywords;
	    article.save(function(err, doc){
		if(err) throw err;
		if(doc)
		{
		    //huzzah
		}
	    });
	}
    });
};

function saveUser(user) {
  var newusername= user.username;
  var newfullname= user.fullname;
  var newhometown= user.hometown;
  var newcurrent_location= user.current_location;
  var newgender= user.gender;
  var newlanguages= user.languages;
  var newwork= user.work;
  var newblacklist = user.blacklist;
  var newarticles = user.articlesRead;
  var newkeywords= user.keywords;

  var newUser = new User({
    username: newusername,
    fullname: newfullname,
    hometown: newhometown,
    current_location: newcurrent_location,
    gender: newgender,
    languages: newlanguages,
    work: newwork,
    blacklist: newblacklist,
    articlesRead: newarticles,
    keywords: newkeywords
 });

 user.remove();
 newUser.save(function(err, doc){
   if(err) throw err;
 });

}

exports.getArticlesRelatedToFacebook = function(username, token,  func)
{
    //get user likes from facebook
    var fql = require('fql');
    var https = require("https");

/*
    var token = "AAAGOBCs6uf8BAPWidZBW99Ng8blGxQRALd44jliYYljU3mcZBNLg5IjB2V2LnIKOCtZCuZAMbrUo8HSl1AT5eZCWlgCJZB4Yk1fo6DYlzVLgZDZD"; */
    var recs = [];
    fql({token: token}).query('SELECT uid FROM user WHERE username = "' + username+'"', function(err, data) {
	if (err) {
            throw err;
	}
	var id = data[0].uid;
	console.log(id);
	var mrcc = 505371215;
	

	var buffer = '';
	
	var path = "https://graph.facebook.com/" + id +"?fields=id,name,interests,likes&access_token=" + token; 
	https.get(path,
		  function(result){
		      console.log("huzzah");
	
		      result.on('data', function(chunk){
			  buffer += chunk;
		      });

		      result.on('end', function(){
			  console.log(buffer);
			  var obj = JSON.parse(buffer);
			  var likes = obj.likes.data;
			  var likeArr = [];
			  for(num in likes)
			  {
			      likeArr.push(likes[num].name);
			  }
			  console.log(likeArr);
			  Article.find({}).exec(function(err, articles){
			      if(err) throw err;
			      if(articles)
			      {
				  for(num in articles)
				  {
				      var words = JSON.parse(articles[num].keywords);
				      for(num in words)
				      {
					  if( likeArr.indexOf(words[num].text) >= 0)
					  {
					      var newRec = {};
					      newRec.url = articles[num].URL;
					      newRec.keyword = words[num].text;
					      newRec.relevance = words[num].relevance;
									 
					      recs.push(newRec);   
					  }
				      }
				  }
			      }
			      func(recs);
			  });
			  
		      });

		  });
    });
};


exports.addWordsToUserBlacklist = function(username, badWords, func) {
  User.findOne({username: username}, function(err, user) {
    if(err) throw err;
    if(user) {
      for(var i = 0; i < badWords.length; i++) {
        delete user.keywords[badWords[i]];
      }
      saveUser(user);
      func(user); 
    } 
  });
};

exports.relatedArticlesForUser = function(username, facebook, func)
{
    User.findOne({username: username}, function(err, user){
	if(err) throw err;
	if(user)
	{
            var articleScores = new Object();
	    var query = Article.find();
            for(var art in query) {
              if(!(art.id in user.articlesRead)) {
                articleScores[art.id] = 0;
                for(var keyMap in art.keywords) {
                  var word = keyMap["text"];
                  var relev = keyMap["relevance"];
                  var userWord = 0;
                  if(word in user.keywords) {userWord = user.keywords[word];}
                  articleScores[art.id] = articleScores[art.id] + userWord * relev;
                }
              }
            }
            
            var artArr = new Array();
            for (var key in articleScores) {
              artArr.push([key, articleScores[key]]);
            }

            for(var i = 0; i < artArr.length; i++) {
              for(var j = i; j < artArr.length; j++) {
                if(artArr[i][1] < artArr[j][1]) {
                  var tmp = artArr[j];
                  artArr[j] = artArr[i];
   		  artArr[i] = tmp;
                }
              }
            } 
            func(artArr);
        }
      
            
	
    });
};
