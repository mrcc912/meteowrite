var mongoose  = require('mongoose');
var alchemy = require('alchamy');
var sha1 = require("sha1");
var zipcodes = require('zipcodes');
var ObjectId = mongoose.Types.ObjectId;

mongoose.connection.on('open', function (ref) {
    console.log('Connected to mongo server.');
});

mongoose.connection.on('error', function (err) {
    console.log('Could not connect to mongo server!');
    console.log(err);
});

mongoose.connect("mongodb://ec2-54-235-227-153.compute-1.amazonaws.com/raw");
//mongoose.connect("mongodb://ec2-50-19-21-233.compute-1.amazonaws.com/raw");
var db = mongoose.connection;
var Schema = mongoose.Schema;

/* Schema and Object Declarations */
var APIUserSchema = mongoose.Schema({
    api_key: String,
    name: String,
    use_count: Schema.Types.Mixed,
});

var ArticleSchema = mongoose.Schema({
    id: String,
    id: Schema.Types.Mixed,
    headline: String,
    biline: String,
    creditline: String,
    source: String,
    section: String,
    URL: String,
    body: String,
    keywords: Schema.Types.Mixed,
    keywordsCalais: Schema.Types.Mixed,
    keywordsCore: Schema.Types.Mixed,
    readers: [Number],
    api_key: String
});

var UserSchema = mongoose.Schema({
    id: Number,
    username: String,
    fullname: String,
    hometown: String,
    current_location: String,
    gender: String,
    languages: [String],
    work: [String],
    articlesRead: [Number],
    tweetsRead: [String],
    facebookLikes: [String],
    keywords: Schema.Types.Mixed,
    interests: Schema.Types.Mixed,
    api_key: String
});

var MetricsUserSchema = mongoose.Schema({
    username: String,
    api_key: String,
    password: String,
    salt: Number
});

var UserArticleLinkSchema = mongoose.Schema({
    userid: Number,
    articleid: Schema.Types.Mixed,
    api_key: String
});


var User = mongoose.model("User", UserSchema);
var Article = mongoose.model("Article", ArticleSchema);
var APIUser = mongoose.model("APIUser", APIUserSchema);
var MetricsUser = mongoose.model("MetricsUser", MetricsUserSchema);
var UserArticleLink = mongoose.model("UserArticleLink", UserArticleLinkSchema);

/* HELPER FUNCTIONS */
function insertKeywordIntoList(word, relev, list)
{
    var found = -1;
    for(i in list)
    {
	if(list[i].text == word)
	{
	    found = i;
	    break;
	}
    }
    if(found > 0)
    {
	list[found].rel += relev;
    }
    else
    {
	var keyObj = new Object();
	keyObj.text = word;
	keyObj.rel = relev;
	list.push(keyObj);
    }		
}

/* APIUSER FUNCTIONS */
exports.addAPIUser = function(name)
{
    APIUser.findOne({name: name}, function(err, api){
	if(err) throw err;
	if(api)
	{
	}
	else{
	    var arr = new Array();
	    var hash = sha1(name);
	    var api = new APIUser({
		name: name,
		api_key: hash,
		use_count: arr
	    });
	    api.save(function(err, art){
		if(err) throw err;
		if(art)
		{
		    //correctly saved =D
		}
	    });	    
	}
    });
}

exports.removeAPIUser = function(key)
{
    APIUser.findOne({api_key: key}, function(err, api){
	if(err) throw err;
	if(api)
	    api.remove();
    });
}

exports.reportAPIuse = reportAPIuse;

function reportAPIuse(key, func_name)
{
    APIUser.findOne({api_key: key}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    var now = new Date();
	    var use = {api: func_name, time: now};
	    api.use_count.push(use);
	    api.markModified('use_count');
	    api.save(function(err, res){
		if(err) throw err;
		if(res)
		{
		    //huzzah saved
		}
	    });
	}
    });
}

exports.reportBarUse = function(api_key, duration, func)
{
    APIUser.findOne({api_key: api_key}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    var now = new Date();
	    var use = {api: "sidebar", time: now, duration: duration};
	    api.use_count.push(use);
	    api.markModified('use_count');
	    api.save(function(err, res){
		if(err) throw err;
		if(res)
		{
		    //huzzah saved
		}
	    });
	}
    });
};

exports.getAPIUseForKey = function(key, func)
{
    APIUser.findOne({api_key: key}, function(err, api){
	if(err) throw err;
	if(api)
	{
	    func(api.use_count);
	}
    });
}

exports.getAllAPIUse = function(func)
{
    APIUser.find({}, function(err, apis){
	if(err) throw err;
	if(apis)
	{
	    func(apis);
	}
    });
}
/* END OF APIUSER FUNCTIONS */

function createUser(id, api_key, params, func)
{
    User.findOne( {id: id, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    func(user);
	}
	else
	{
	    var newuser = new User({
		id: id,
		api_key: api_key
	    });
	    
	    if(params.name)
		newuser.fullname = params.name;
	    if(params.username)
		newuser.username = params.username;
	    if(params.hometown)
		newuser.hometown = params.hometown;
	    if(params.current_location)
		newuser.current_location = params.current_location;
	    if(params.gender)
		newuser.gender = params.gender;
	    if(params.languages)
		newuser.gender = params.languages;
	    if(params.work)
		newuser.work = params.work;
	    
	    newuser.keywords = new Array();
	    newuser.keywordsCalais = new Array();
	    newuser.keywordsCore = new Array();
	    newuser.save(function(err,doc){
		if(err) throw errl
		if(doc)
		{
		    // created a new user
		    func(doc);
		}
	    });
	}
    });
}

exports.createUser = createUser;

exports.updateUser = function(id, api_key, params, func)
{
    User.findOne( {id: id, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    if(params.name)
		newuser.fullename = params.name;
	    if(params.username)
		newuser.username = params.username;
	    if(params.hometown)
		newuser.hometown = params.hometown;
	    if(params.current_location)
		newuser.current_location = params.current_location;
	    if(params.gender)
		newuser.gender = params.gender;
	    if(params.languages)
		newuser.gender = params.languages;
	    if(params.work)
		newuser.work = params.work;
	    
	    newuser.save(function(err,doc){
		if(err) throw errl
		if(doc)
		{
		    // created a new user
		    func(doc);
		}
	    });	    
	}
	else
	{   
	    func("Couldn't find a user with that id");
	}
    });    
}

exports.addUser = function(id, username, fname, home, curr, gen, lang, work, func)
{
    User.findOne( {username: name}, function(err, user){
	if(user)
	{
	    func({success: "success", uploaded: "false"});
	}
	else
	{
	    //create user
	    var object = new Array();
	    var newUser = new User({
		id: id,
		username: username,
		fullname: fname,
		hometown: home,
		current_location: curr,
		gender: gen,
		languages: lang,
		work: work
	    });
	    newUser.keywords = {};
            newUser.keywordsCalais = {};
            newUser.keywordsCore = {};
	    newUser.save(function(err,doc){
		if(err){
		    func({success: "false", uploaded: "false"});
		    throw err;
		}
		if(doc)
		{
		    func({success: "success", uploaded: "true"});
		}

	    });
	}
    });
};

exports.removeUserByName = function(name)
{
    User.findOne({username: name}, function(err, user){
	if(err) throw err;
	if(user)
	    user.remove();
    });
}
exports.removeUser = function(id, api_key)
{
    User.findOne({id: id, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	    user.remove();
    });
};

exports.getUsers = function(api_key, func) {
    User.find({api_key: api_key}, function(err,users) {
    if(err) throw err;
      if(users)
	  func(users);
  });
};

exports.getUser = function(id, api_key, func)
{
    User.findOne( {id : id, api_key: api_key}, function(err, user){
	if(err) throw err;
	func(user);
    });
};
/* END OF USER FUNCTIONS */

/* ARTICLE FUNCTIONS */
exports.updateArticles = function(api)
{
    Article.find({}, function(err, articles){
	if(err) throw err;
	if(articles)
	{
	    for(i in articles)
	    {
		articles[i].api_key = api;
		articles[i].save(function(err, doc){
		    if(err) throw err;
		    if(doc)
		    {
			//huzzah!!
		    }
		});
	    }
	}
    });
}

exports.getArticles = function(api_key,func) {
    Article.find({api_key: api_key}, function(err,articles) {
    if(err) throw err;
      if(articles)
	  func(articles);
  });
};

exports.getArticle = function(articleid, api ,func) {
    Article.findOne({id: articleid, api_key: api}, function(err, article){
    if(err) throw err;
      if(article)
	  func(article); 	
      else
	  func("Could not find an article with that name");
  });
};

exports.checkArticleExistence = function(aid, api, func)
{
    Article.findOne({api_key: api, id: aid}, function(err, article){
	if(err) throw err;
	if(article)
	{
	    func(article)
	}
	else
	{
	    func(null);
	}
    });
}
/* obsolete method */
exports.addKeywords = function(userID, articleID, api_key, keys)
{
    User.findOne( {id: userID, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    for(var i=0; i<keys.length; i++)
	    {
		var key = keys[i].text;
		if(keys[i].text.indexOf('.') != -1)
		    continue;
		if(user.keywords[keys[i].text])
		{
		    user.keywords[keys[i].text] += keys[i].relevance;
		}
		else
		{
		    user.keywords[keys[i].text] = keys[i].relevance;
		}
	    }

            user.articlesRead.push(articleID);          
            //saveUser(user);
	}
    });
};

exports.addTweet = function(userID, tweetID,api_key,  keys)
{
    User.findOne( {id : userID, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    for(var i=0; i<keys.length; i++)
	    {
		var key = keys[i].text;
		var rel = keys[i].relevance;
		if(keys[i].text.indexOf('.') != -1)
		    continue;
		
		insertKeywordIntoList(key, rel, user.keywords);
	    }
	    
	    if(!user.tweersRead) 
		user.tweetsRead = new Array();
            user.tweetsRead.push(articleID);
            //saveUser(user);
	    user.save(function(err, doc){});
	}
    });
};

exports.articleOverlap = function(func) {
    var articles = Article.find(function(err,articles) {
    if(err) throw err;
    var smoke = new Object();
    for(var i = 0; i < articles.length; i++) {
      var articleId = articles[i].id;
      for(var j = 0; j < articles[i].keywords.length; j++) {
        var curMap = articles[i].keywords[j];
        var curText = curMap["text"];
        if(curText in smoke) {
          smoke[curText].push(articleId);
        }
        else {
          smoke[curText] = new Array();
          smoke[curText].push(articleId);
        }
      }
    }
    func(smoke);
  });
};

exports.addArticle = function(ID, head, bi, credit, src, sec, url, bod, api_key, func)
{
    Article.findOne( { id : ID, api_key: api_key}, function(err, article){
	if(article)
	{
	}
	else
	{
	    // read through article

	    // create article
	    var newArticle = new Article({
		id : ID,
		headline: head,
		biline: bi,
		creditline: credit,
		source: src,
		section: sec,
		URL: url,
		body: bod,
	    });
	    newArticle.save(function(err, doc){
		if(err) throw err;
		//populate with keywords
		
		func(doc);
	    });
	}
    });
};

exports.populateKeywords = function(ID, api_key, keywords)
{
    Article.findOne( {id: ID, api_key: api_key} , function(err, article){
	if(err) throw err;
	if(article)
	{
	    article.keywords = keywords;
	    article.save(function(err, doc){
		if(err) throw err;
		if(doc)
		{
		    //huzzah
		}
	    });
	}
    });
};

exports.getUserFacebookLikes = function(username, user_id,  api_key,  token, func)
{
    var fql = require('fql');
    var https = require("https");

    var recs = [];
    fql({token: token}).query('SELECT uid FROM user WHERE username = "' + username+'"', function(err, data) {
	if (err) {
            throw err;
	}
	var id = data[0].uid;

	var mrcc = 505371215;
	

	var buffer = '';
	
	var path = "https://graph.facebook.com/" + id +"?fields=id,name,interests,likes&access_token=" + token; 
	https.get(path,
		  function(result){
		      
		      result.on('data', function(chunk){
			  buffer += chunk;
		      });
		      
		      result.on('end', function(){

			  var obj = JSON.parse(buffer);
			  var likes = obj.likes.data;
			  var likeArr = [];
			  for(num in likes)
			  {
			      likeArr.push(likes[num].name);
			  }
			  User.findOne({id: user_id, api_key: api_key}, function(err, user){
			      if(err) throw err;
			      if(user)
			      {
				  for(num in likeArr)
				  {
				      user.facebookLikes.push(likeArr[num]);
				  }
				  
			      }
			      user.save(function(err, doc){
				  if(err) throw err;
				  if(doc)
				  {
				      //huzzah
				  }
			      });
			      //saveUser(user);
			      func(likeArr);
			  });
		      });
		      
		  });
    });
    
}

exports.getArticlesRelatedToFacebook = function(username, user_id, token, api_key, func)
{
    //get user likes from facebook
    var fql = require('fql');
    var https = require("https");
    
    var recs = [];
    fql({token: token}).query('SELECT uid FROM user WHERE username = "' + username+'"', function(err, data) {
	if (err) {
            throw err;
	}
	var id = data[0].uid;

//	var mrcc = 505371215;
	var buffer = '';
	
	var path = "https://graph.facebook.com/" + id +"?fields=id,name,interests,likes&access_token=" + token; 
	https.get(path,
		  function(result){

		      
		      result.on('data', function(chunk){
			  buffer += chunk;
		      });
		      
		      result.on('end', function(){

			  var obj = JSON.parse(buffer);
			  var likes = obj.likes.data;
			  var likeArr = [];
			  for(num in likes)
			  {
			      likeArr.push(likes[num].name);
			  }
			  Article.find({api_key: api_key}).exec(function(err, articles){
			      if(err) throw err;
			      if(articles)
			      {
				  for(num in articles)
				  {
				      var words = articles[num].keywords;
				      for(num in words)
				      {
					  if( likeArr.indexOf(words[num].text) >= 0)
					  {
					      var newRec = {};
					      newRec.url = articles[num].URL;
					      newRec.keyword = words[num].text;
					      newRec.relevance = words[num].relevance;
					      
					      recs.push(newRec);   
					  }
				      }
				  }
			      }
			      func(recs);
			  });
			  
		      });
		      
		  });
    });
};

exports.addWordsToUserBlacklist = function(id, goodWords, api_key,  func) {
    User.findOne({id: id, api_key: api_key}, function(err, user) {
    if(err) throw err;
    if(user) {
	/*
      var wordsToDelete = new Array();
      for(var key1 in user.keywords) {
        if(goodWords.indexOf(key1) == -1) {
          wordsToDelete.push(key1);
        }
      }
      for(var i = 0; i < wordsToDelete.length; i++) {
        delete user.keywords[wordsToDelete[i]];
      }
      saveUser(user); 
	*/
	for(var i=0; i<user.keywords.length; i++)
	{
	    if(goodWords.indexOf(user.keywords[i].text ==-1))
	       delete user.keywords[i];
	}
      func(user); 
    } 
  });
};


exports.relatedArticlesForUserObj = function(user, numRec, api, func)
{
    var articleScores = new Object();
    var articleObject = new Object();
    Article.find({api_key: api}, function(err,articles) {
        if(err) throw err;

        for(var i = 0; i < articles.length; i++) {
            var art = articles[i];
            articleObject[art.headline] = new Object();
                if(user.articlesRead.indexOf(art.id) == -1) {
                    articleScores[art.headline] = 0;
		    
                    for(var j = 0; j < art.keywords.length; j++) {
			var keyMap = art.keywords[j];
			var word = keyMap["text"];
			var relev = keyMap["relevance"];
			var userWord = 0;
			if(word in user.keywords) {

			    userWord = user.keywords[word];
			    articleObject[art.headline][word] = userWord*relev;
			}
			articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                    }
		    
                    for(var j = 0; j < art.keywordsCalais.length; j++) {
			var keyMap = art.keywordsCalais[j];
			var word = keyMap["text"];
			var relev = keyMap["relevance"];
			var userWord = 0;
			if(word in user.keywords) {

                      userWord = user.keywords[word];
			    articleObject[art.headline][word] = userWord*relev;
			}
			articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                    }
		    
		    for(var j = 0; j < art.keywordsCore.length; j++) {
			var keyMap = art.keywordsCore[j];
			var word = keyMap["text"];
			var relev = keyMap["relevance"];
			var userWord = 0;
			if(word in user.keywords) {

			    userWord = user.keywords[word];
			    articleObject[art.headline][word] = userWord*relev;
			}
			articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                    }
		    
		    
                }
        }
	
        var artArr = new Array();
        for (var key in articleScores) {
            artArr.push([key, articleScores[key], articleObject[key]]);
        }
	
        for(var i = 0; i < artArr.length; i++) {
            for(var j = i; j < artArr.length; j++) {
                if(artArr[i][1] < artArr[j][1]) {
                    var tmp = artArr[j];
                    artArr[j] = artArr[i];
                    artArr[i] = tmp;
                }
            }
        }
        var retArr = new Object();
        var bla = numRec;
        if(bla > artArr.length) {
            bla = artArr.length;
        }
        for(var i = 0; i < bla; i++) {
            retArr[artArr[i][0]] = artArr[i][2];
        }
	
        func(retArr);
    });
};



exports.relatedArticlesForUser = function(id, numRec, api, func)
{
    User.findOne({id: id, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	{
            var articleScores = new Object();
            var articleObject = new Object(); 
	    Article.find({api_key: api}, function(err,articles) {
              if(err) throw err;
              for(var i = 0; i < articles.length; i++) {
                var art = articles[i];
                articleObject[art.headline] = new Object();
                if(user.articlesRead.indexOf(art.id) == -1) {
                  articleScores[art.headline] = 0;
               
		  for(var j = 0; j < art.keywordsCalais.length; j++) {
                    var keyMap = art.keywordsCalais[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {

			userWord = user.keywords[word].text;
			userRel = user.keywords[word].rel;
			articleObject[art.headline][userWord] = userRel*relev;
			/*userWord = user.keywords[word];
                      articleObject[art.headline][word] = userWord*relev;
*/
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
 
                  for(var j = 0; j < art.keywordsCore.length; j++) {
                    var keyMap = art.keywordsCore[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {

			userWord = user.keywords[word].text;
			userRel = user.keywords[word].rel;
			articleObject[art.headline][userWord] = userRel*relev;
			/*userWord = user.keywords[word];
			  articleObject[art.headline][word] = userWord*relev;
			*/
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
 
                  for(var j = 0; j < art.keywords.length; j++) {
                    var keyMap = art.keywords[j];
                    var word = keyMap["text"];
                    var relev = keyMap["relevance"];
                    var userWord = 0;
                    if(word in user.keywords) {

			userWord = user.keywords[word].text;
			userRel = user.keywords[word].rel;
			articleObject[art.headline][userWord] = userRel*relev;			
			/*
			  userWord = user.keywords[word];
			  articleObject[art.headline][word] = userWord*relev;
			*/
                    }
                      articleScores[art.headline] = articleScores[art.headline] + userWord * relev;
                  }
                }
              }
            
              var artArr = new Array();
              for (var key in articleScores) {
                artArr.push([key, articleScores[key], articleObject[key]]);
              }

              for(var i = 0; i < artArr.length; i++) {
                for(var j = i; j < artArr.length; j++) {
                  if(artArr[i][1] < artArr[j][1]) {
                    var tmp = artArr[j];
                    artArr[j] = artArr[i];
   		    artArr[i] = tmp;
                  }
                }
              } 
              var retArr = new Object();
              var bla = numRec;
              if(bla > artArr.length) {
                bla = artArr.length;
              }
              for(var i = 0; i < bla; i++) {
                retArr[artArr[i][0]] = artArr[i][2];
              }

              func(retArr);
          });
        }
    });
};

/* PUBLIC API METHODS */

exports.getTopKeywordsForArticle = function(articleID, num, api_key, func)
{
    reportAPIuse(api_key, "getTopKeywordsForArticle");
    Article.findOne({id: articleID, api_key: api_key}, function(err, article){
	if(err)
	{
	    throw err;
	}
	if(article)
	{
	    console.log("found article");
	    var total = new Array();
	    for(var i=0; i<article.keywords.length; i++)
		total.push(article.keywords[i]);
	    for(var i=0; i<article.keywordsCalais.length; i++)
		total.push(article.keywordsCalais[i]);
	    var sorted = total.sort(function(a, b){ 
		return b.relevance - a.relevance });
	    var result = [];
	    //if num is greater than 0, return num entries, else return all
	    if(num >0)
	    {
		for(var i=0; i<sorted.length; i++)
		{
		    if (i>= num) break;
		    result.push({text: sorted[i].text, rel:sorted[i].relevance});
		}
		func(result);
	    }
	    else
		func(sorted);
	}
	else
	{
	    console.log("found nothing");
	    func({success: "failure"});
	}
    });
}

exports.getArticleReaderInterests = function(aid, api_key, num, func)
{
    reportAPIuse(api_key, "getArticleReaderInterests");
    UserArticleLink.find({api_key: api_key, articleid: aid}, function(err, links){
	if(err) throw err;
	if(!links)
	{
	    func(new Array());
	}
	else
	{
	    var userids = new Array();;
	    for(var i=0; i<links.length; i++)
		userids.push(links[i].userid);
	    User.find({id: {$in :userids}, api_key: api_key}, function(err2, readers){
		if(err2) throw err2;
		if(readers)
		{
		    var interests = new Array();
		    console.log(readers.length);
		    for(var i=0; i<readers.length; i++)
		    {
			var reader = readers[i];
			console.log(reader);
			for(var j=0; j<reader.keywords.length; j++)
			{
			    console.log(reader.keywords[i]);
			    insertKeywordIntoList(reader.keywords[j].text, reader.keywords[j].rel, interests);		
                        }
		    }
		    console.log(interests);
		    var result = interests.sort(function(a,b){ return b.rel - a.rel;});
		    if(num >= 0)
			result = result.slice(0, num);
		    func(result);
		}
		else
		{
		}
	    });
	}
    });
}

exports.getAuthorKeywords = function(author, api_key, num, func)
{
    reportAPIuse(api_key, "getAuthorKeywords");

    var reg = new RegExp(author);
    var query = Article.find({biline: reg, api_key: api_key});

    if(author == "")
	query.limit(20);
    query.exec(function(err, articles){
	if(err) throw err;
	if(articles)
	{
	    var keywords = new Array();
	    for(index in articles)
	    {
		var article = articles[index];
		var total = new Array();
		for(var i=0; i<article.keywords.length; i++)
		    total.push(article.keywords[i]);
		for(var i=0; i<article.keywordsCalais.length; i++)
		    total.push(article.keywordsCalais[i]);
		for(var i=0; i<total.length; i++)
		{
		    insertKeywordIntoList(total[i].text, total[i].relevance, keywords);
		}
	    }
	    var sorted = keywords.sort(function(a, b){return b.rel - a.rel});
	    if(num >= 0)
		sorted = sorted.slice(0, num);
	    func(sorted);
	}
	else
	{
	    func([]);
	}
    });
}

exports.getArticleFacebook = function(articleID, api_key, func)
{
    reportAPIuse(api_key, "getArticleFacebook");
    Article.findOne({id: articleID, api_key: api_key}, function(err, article){
	var allLikes = [];
	for(index in article.readers)
	{
	    var id = article.readers[index]
	    User.findOne({id: id, api_key: api_key}, function(err, user){
		if(err) throw err;
		if(user)
		{
		    for(i in user.facebookLikes)
		    {
			allLikes.push(user.facebookLikes[i]);
		    }
		}
	    });
	}
	func(allLikes);
    });
}

function filter(one, two)
{
    var result = [];
    for(i in one)
	for(j in two)
	    if(two[j].text == one[i].text && two[j].rel != one[i].rel)
		result.push(one[i]);
    return result;
}

function updateUserKeywords(user, article, func)
{
    for(i in article.keywords) 
    {
	var textMap = article.keywords[i];
	var word = textMap["text"];
	if(word.indexOf(".") != -1) 
	    continue;
	var relev = textMap["relevance"];
	insertKeywordIntoList(word, relev, user.keywords);
    }
    for(i in article.keywordsCalais)
    {
	var textMap = article.keywordsCalais[i];
	var word = textMap["text"];
	if(word.indexOf(".") != -1)
	    continue;
	var relev = textMap["relevance"];
	insertKeywordIntoList(word, relev, user.keywords);
    }
    /*
    for(var i = 0; i<article.keywordsCore.length; i++)
    {
	var textMap = article.keywordsCore[i];
	var word = textMap["text"];
	if(word.indexOf(".") != -1)
	    continue;
	var relev = textMap["relevance"];
	if(word in user.keywords) {
	    user.keywords[word] += relev;
	}
	else {
	    user.keywords[word] = relev;
	}
    }
*/
    user.markModified('keywords');
    user.save(function(err, doc){
	if(err) throw err;
	if(doc)
	{
	    func(doc, article);
	}
    });
}

exports.userReadArticle = function(userID, articleID, api_key, func)
{
    reportAPIuse(api_key, "userReadArticle");
    Article.findOne({id: articleID, api_key: api_key}, function(err, article){
	if(err) throw err;
	if(!article)
	{
	    func("Article not found");
	}
	else
	{
	    //read the article
	    User.findOne({id: userID}, function(err, user){
		if(err) throw err;
		if(!user)
		{
		    createUser(userID, api_key, new Object(), function(newuser){
			updateUserKeywords(newuser, article, function(u, a){
			    var link = new UserArticleLink({
				userid: u.id,
				articleid: a.id,
				api_key: api_key
			    });
			    link.save(function(err, doc){
				if(err) throw err;
				if(doc)
				{
				    func(doc);
				}
			    });
			});
		    });
		}
		else
		{
		    updateUserKeywords(user, article, function(u, a){
			UserArticleLink.findOne({userid: u.id, articleid: a.id}, function(err, ualink){
			    if(err) throw err;
			    if(ualink)
			    {
				func(ualink);
			    }
			    else
			    {
				var link = new UserArticleLink({
				    userid: u.id,
				    articleid: a.id,
				    api_key: api_key
				});
				link.save(function(err, doc){
				    if(err) throw err;
				    if(doc)
				    {
					func(doc);
				    }
				});
			    }
			});
		    });
		}
	    });
	}
    });
}
    
exports.getUsersWithParameters = function(params, api_key, func)
{
    var param = new Object();
    for(p in params)
	param[p] = params[p];
    param.api_key = api_key;
    User.find(param, function(err, users){
	if(err) throw err;
	if(users)
	{
	    func(user);
	}
    });
}

exports.reccomendAd = function(userID, ads, api_key, func)
{
    reportAPIuse(api_key, "reccomendAd");
    User.findOne({id: userID, api_key: api_key}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    var use_location = false;
	    var user_loc = user.current_location.split(",");
	    var user_city = user_loc[0];
	    var user_state = user_loc[1].replace(/\s+/g, '');
	    var user_zip = zipcodes.lookupByName(user_city, user_state);
	    //compare location  and initalize score
	    if(user_zip.zip)
		use_location = true;
	    for(ad in ads)
	    {
		
		ads[ad].score = 0.0;
		
		if(use_location)
		{
		    //check zipcode
		    var loc = ads[ad].location.split(",");
		    var city = loc[0];
		    var state = loc[1].replace(/\s+/g, '');
		    var zip = zipcodes.lookupByName(city, state);
		    if(zip.zip)
		    {
			var dist = zipcodes.distance(zip[0], user_zip[0]);
			dist *= 0.1;
			ads[ad].score -= dist;
		    }
		}
	    }

	    //look for keywords
	    for(word in user.keywords)
	    {
		for(ad in ads)
		{
 		    if(ads[ad].keywords.indexOf(user.keywords[word].text) != -1)
		    {
			//update score
			ads[ad].score += user.keywords[word].rel;
		    }
		    else if( user.keywords[word].text.indexOf(ads[ad].keywords) != -1)
		    {
			//update score
			ads[ad].score += user.keywords[word].rel;
		    }
		}
	    }
	    
	    var result = ads.sort(function(a, b){return b.score - a.score;});
	    func(result);
	}
	else
	{
	    func("Could not find a user with username: " + userID);
	}
    });
}

exports.clearAll = function(api_key)
{
    Article.find({api_key: api_key}, function(err, articles){
	if(err) throw err;
	if(articles){
	    for(var i=0; i<articles.length; i++)
		articles[i].remove();
	    console.log("removed " + articles.length + " articles from the database");
	}
    });
    User.find({api_key:api_key}, function(err, users){
	if(err) throw err;
	if(users){
	    for(var i=0; i<users.length; i++)
		users[i].remove();}
	    console.log("removed " + users.length + " users from the database");
    
    });
    UserArticleLink.find({api_key: api_key}, function(err, links){
	if(err) throw err;
	if(links){
	    for(var i=0; i<links.length; i++)
		links[i].remove();
	    console.log("removed " + links.length + " links from the database");
	}
    });
}

exports.clearReaders = function(api_key)
{
    Article.find({api_key: api_key}, function(err, articles){
	if(err) throw err;
	if(articles)
	{
	    for(index in articles)
	    {
		articles[index].readers = new Array();
		articles[index].save(function(err, doc){
		    if(err) throw err;
		    if(doc)
		    {
			//huzzah!
		    }
		});
	    }
	}
    });
}

exports.metrics_user_login = function(username, password, func)
{
    MetricsUser.findOne({username: username}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    if(sha1(password + user.salt) == user.password)
		func(user);
	    else
		func(-1);
	}
	else
	    func(-2);
    });
}

exports.metrics_user_new = function(username, password, api_key)
{
    MetricsUser.findOne({username: username}, function(err, user){
	if(err) throw err;
	if(user)
	{
	    func(user);
	}
	else
	{
	    var rand = Math.floor((Math.random() * 99999999 )+ 1);
	    var hash  = sha1(password + rand);
	    var newuser = new MetricsUser({
		username: username,
		password: hash,
		api_key: api_key,
		salt: rand
	    });
	}
    });
}

